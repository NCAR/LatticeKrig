)
unique(
c( look, look2)
)
Y= rep(0,16)
Y[2:7]<- 1
Y2 <- rep(0,64)
Y2[2:7]<-1
look<- fft( Y)
look2<- fft(Y2)
look
look2
look<- signif( look, 6)
look2<- signif( look2, 6)
match( look, unique(
c( look, look2) )
)
match( look2, unique(
c( look, look2) )
)
12.5/11
ppois(60,50)
1-ppois(60,50)
1- pnorm( 10/sqrt( 50))
80/90
library( fields)
vgram
xGrid<- seq(-4,4,length.out=150 )
pdf<- dnorm( xgrid)
set.seed( 222) # set random seed
X<- rnorm( 400)
xGrid<- seq(-4,4,length.out=150 )
pdf<- dnorm( xGrid)
set.seed( 222) # set random seed
X<- rnorm( 400)
quartz()
hist( X, prob=TRUE)
lines( xGrid, pdf,col="red")
help( hist)
hist( X, prob=TRUE, col="grey")
lines( xGrid, pdf,col="red", lwd=3)
set.seed( 232)
X= rnorm( 400)
Y = rnorm( 400)
plot( X,Y, col="grey", pch=16, cex=1.5)
set.seed( 232)
X= rnorm( 400)
Y = rnorm( 400)
plot( X,Y, col="grey", pch=16, cex=.5)
set.seed( 232)
X= rnorm( 400)
Y = rnorm( 400)
plot( X,Y, col="grey", pch=16)
plot( X,Y, col="grey", pch=16, cex=.8)
help( outer)
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150)
pdf2D <- (1/2*pi)* exp(
-(xGrid[i]^2) + yGrid[j]^2)/2
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150)
pdf2D <- (1/2*pi)*
exp(
-(xGrid[i]^2  + yGrid[j]^2)/2
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150){}
pdf2D <- (1/2*pi)*
exp(
-(xGrid[i]^2  + yGrid[j]^2)/2
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150){
pdf2D <- (1/2*pi)*
exp(
-(xGrid[i]^2  + yGrid[j]^2)/2
)
}
}
contour xGrid, yGrid, pdf2D, col="orange3")
contour( xGrid, yGrid, pdf2D, col="orange3")
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/2*pi)*
exp(
-(xGrid[i]^2  + yGrid[j]^2)/2
)
}
}
contour( xGrid, yGrid, pdf2D, col="orange3")
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/2*pi)*
exp(
-(xGrid[i]^2  + yGrid[j]^2)/2
)
}
}
contour( pdf2D)
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a)*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2)/ (2a^2)
)
}
}
par( pty="s")
plot( X,Y, col="grey", pch=16, cex=.8)
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2)/ (2a^2)
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2)/ (2a^2)
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2)/ (2a^2)
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2)
/ (2a^2)
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2) / (2a^2)
)
}
}
yGrid <- xGrid
pdf2D<- matrix(NA, 150,150 )
a <- sqrt( 1- rho^2)
for ( i in 1:150){
for ( j in 1:150){
pdf2D[i,j] <- (1/(2*pi*a) )*
exp(
-(xGrid[i]^2 - a*xGrid[i]*yGrid[j] + yGrid[j]^2) / (2*a^2)
)
}
}
par( pty="s")
plot( X,Y, col="grey", pch=16, cex=.8)
sample( 1:6, 4, replace = TRUE)
sample( 1:6, 4, replace = TRUE)
EX = sum( 1:6)/6
EX2 = sum( (1:6)^2 /6)
VARX = (EX2 - EX^2)/n
n<- 4
N<- 5000
X<- rep( NA, N)
for( j in 1:N ){
temp<- sample(1:6, n, replace=TRUE)
X[j]<-mean( temp )
}
EX = sum( 1:6)/6
EX2 = sum( (1:6)^2 /6)
VARX = (EX2 - EX^2)/n
hist( X)
VARX
n<- 4
N<- 5000
X<- rep( NA, N)
for( j in 1:N ){
temp<- sample(1:6, n, replace=TRUE)
X[j]<-mean( temp )
}
EX = sum( 1:6)/6
EX2 = sum( (1:6)^2 /6)
VARX = (EX2 - EX^2)/n
xGrid <- seq( -4,4, length.out=200)
pdf<- dnorm( xGrid)
hist( (X - EX)/sqrt(VARX), prob=TRUE )
lines( xGrid, pdf, col="magenta", lwd=3)
quartz()
n<- 4
N<- 5000
X<- rep( NA, N)
for( j in 1:N ){
temp<- sample(1:6, n, replace=TRUE)
X[j]<-mean( temp )
}
EX = sum( 1:6)/6
EX2 = sum( (1:6)^2 /6)
VARX = (EX2 - EX^2)/n
xGrid <- seq( -4,4, length.out=200)
pdf<- dnorm( xGrid)
hist( (X - EX)/sqrt(VARX), prob=TRUE )
lines( xGrid, pdf, col="magenta", lwd=3)
n<- 40
N<- 5000
X<- rep( NA, N)
for( j in 1:N ){
temp<- sample(1:6, n, replace=TRUE)
X[j]<-mean( temp )
}
EX = sum( 1:6)/6
EX2 = sum( (1:6)^2 /6)
VARX = (EX2 - EX^2)/n
xGrid <- seq( -4,4, length.out=200)
pdf<- dnorm( xGrid)
hist( (X - EX)/sqrt(VARX), prob=TRUE )
lines( xGrid, pdf, col="magenta", lwd=3)
3*24*365
26289/7
help( sample)
860 -( 60 +58)
600 -( 60 +58)
482/560
library(LatticeKrig)
LKrigSetup
help( "LKrigSetup")
library( fields)
ls( pos=2)
sim.mKrig.approx
sim.mKrig.approx
makeSimulationGrid
makePredictionPoints
library( fields)
help( Krig)
16* 300
library( LatticeKrig)
LKrig
1.02^2
12*620
1- (364/365)^20
1- (364/365)^10
1- (364/365)^20
1- (364/365)^5
(364/365)
1- (364/365)^50
1- (364/365)^100
sum( log( 365:344) - 20*log( 365))
exp( -2466)
1- ( 355/365)^20
sum( log( 365:344) - log(rep( 365,20))
)
sum( log( 365:345) - log(rep( 365,20))
)
log(365:345)
sum( log( 365:346) - log(rep( 365,20)))
ttmp
tmp
exp(  sum( log( 365:346) - log(rep( 365,20))) )
1:10
1:10
-3: 5
cumsprod
cumprod
cumprod( 1:4)
library( LatticeKrig)
ls( pos=2)
ls( pos=3)
library(LatticeKrig)
library(fields)
knitr::opts_chunk$set(echo = TRUE)
lambda = 0.05
overlap = 2.5
psi <- function(d) {
return(1/3 * (1-d)^6 * (35*d^2 + 18*d + 3) * (d < 1))
}
#clear x and y to make sure our data doesn't get overwritten
rm(x, y)
data(KrigingExampleData)
nc <- 6
ncBuffer <- 5
#finding the spacing for the lattice
delta <- 1/(nc-1)
latInside <- seq(from=0, to=1, by=delta)
#adding the buffer lattice points outside the interval
latBefore <- seq(to=0-delta, by=delta, length.out = ncBuffer)
latAfter <- seq(from=1+delta, by=delta, length.out = ncBuffer)
lattice <- c(latBefore, latInside, latAfter)
m <- length(lattice)
Phi <- psi(rdist(x, lattice) / (overlap*delta)
<<<<<<< HEAD
library(LatticeKrig)
library(fields)
lambda = 0.05
overlap = 2.5
psi <- function(d) {
return(1/3 * (1-d)^6 * (35*d^2 + 18*d + 3) * (d < 1))
}
rm(x, y)
data(KrigingExampleData)
nc <- 6
ncBuffer <- 5
#finding the spacing for the lattice
delta <- 1/(nc-1)
latInside <- seq(from=0, to=1, by=delta)
#adding the buffer lattice points outside the interval
latBefore <- seq(to=0-delta, by=delta, length.out = ncBuffer)
latAfter <- seq(from=1+delta, by=delta, length.out = ncBuffer)
lattice <- c(latBefore, latInside, latAfter)
m <- length(lattice)
Phi <- psi(rdist(x, lattice) / (overlap*delta)
B <- spind2spam(
LKDiag(c(-1, 2.01, -1), m)
)
B <- spam2full(LKDiag(c(-1, 2.01, -1), m))
Q <- t(B) %*% B
P <- solve(Q)
M <- Phi %*% P %*% t(Phi) + lambda*diag(1, length(x))
Minverse <- solve(M)
data(KrigingExampleData)
ls()
remove( list=ls())
data(KrigingExampleData)
ls()
KrigingExampleData$x
library(LatticeKrig)
library(fields)
knitr::opts_chunk$set(echo = TRUE)
lambda = 0.05
overlap = 2.5
psi <- function(d) {
return(1/3 * (1-d)^6 * (35*d^2 + 18*d + 3) * (d < 1))
}
#clear x and y to make sure our data doesn't get overwritten
rm(x, y)
data(KrigingExampleData)
x<- KrigingExampleData$x
y<- KrigingExampleData$y
nc <- 6
ncBuffer <- 5
#finding the spacing for the lattice
delta <- 1/(nc-1)
latInside <- seq(from=0, to=1, by=delta)
#adding the buffer lattice points outside the interval
latBefore <- seq(to=0-delta, by=delta, length.out = ncBuffer)
latAfter <- seq(from=1+delta, by=delta, length.out = ncBuffer)
lattice <- c(latBefore, latInside, latAfter)
m <- length(lattice)
Phi <- psi(rdist(x, lattice)) / (overlap*delta)
B <- spind2spam(
LKDiag(c(-1, 2.01, -1), m)
)
LKDiag
m
LKDiag(c(-1, 2.01, -1), m)
B <- (
LKDiag(c(-1, 2.01, -1), m)
)
B <- spam2full(LKDiag(c(-1, 2.01, -1), m))
Q <- t(B) %*% B
P <- solve(Q)
M <- Phi %*% P %*% t(Phi) + lambda*diag(1, length(x))
Minverse <- solve(M)
nc <- 6
ncBuffer <- 5
delta <- 1 / (nc-1)
L1Inside <- seq(from=0, to=1, by=delta)
L1Before <- seq(to=0-delta, by=delta, length.out = ncBuffer)
L1After <- seq(from=1+delta, by=delta, length.out = ncBuffer)
L1 <- c(L1Before, L1Inside, L1After)
L2Inside <- seq(from=0, to=1, by=delta/2)
L2Before <- seq(to=0-delta/2, by=delta/2, length.out = ncBuffer)
L2After <- seq(from=1+delta/2, by=delta/2, length.out = ncBuffer)
L2 <- c(L2Before, L2Inside, L2After)
L3Inside <- seq(from=0, to=1, by=delta/4)
L3Before <- seq(to=0-delta/4, by=delta/4, length.out = ncBuffer)
L3After <- seq(from=1+delta/4, by=delta/4, length.out = ncBuffer)
L3 <- c(L3Before, L3Inside, L3After)
s1 <- length(L1)
s2 <- length(L2)
s3 <- length(L3)
c(s1, s2, s3)
alpha <- c(4, 2, 1)/7
Phi1 <- psi(rdist(x, L1) / (overlap*delta) * sqrt(alpha[1])
Phi2 <- psi(rdist(x, L2) / (overlap*delta/2) * sqrt(alpha[2])
library( LatticeKrig)
lambda = 0.05
overlap = 2.5
psi <- function(d) {
return(1/3 * (1-d)^6 * (35*d^2 + 18*d + 3) * (d < 1))
}
WendlandFunction()
WendlandFunction
rm(x, y)
data(KrigingExampleData)
x<- KrigingExampleData$x
y<- KrigingExampleData$y
nc <- 6
ncBuffer <- 5
#finding the spacing for the lattice
delta <- 1/(nc-1)
latInside <- seq(from=0, to=1, by=delta)
#adding the buffer lattice points outside the interval
latBefore <- seq(to=0-delta, by=delta, length.out = ncBuffer)
latAfter <- seq(from=1+delta, by=delta, length.out = ncBuffer)
lattice <- c(latBefore, latInside, latAfter)
m <- length(lattice)
Phi <- psi(rdist(x, lattice)) / (overlap*delta)
B <- (
LKDiag(c(-1, 2.01, -1), m)
)
B <- spam2full(LKDiag(c(-1, 2.01, -1), m))
Q <- t(B) %*% B
P <- solve(Q)
M <- Phi %*% P %*% t(Phi) + lambda*diag(1, length(x))
Minverse <- solve(M)
ones <- rep(1, length(x))
Z <- cbind(ones, x)
dHat <- solve(t(Z) %*% Minverse %*% Z, t(Z) %*% Minverse %*% y)
G <- t(Phi)  %*% Phi + lambda*Q
cHat <- solve(G) %*% t(Phi) %*% (y - Z %*% dHat)
info <- LKrigSetup(as.matrix(c(0,1)), NC = 6, NC.buffer = 5,
nlevel = 1, a.wght = 2.01,
alpha = 1, lambda = 0.05, overlap=2.5,
normalize = FALSE, LKGeometry = "LKInterval")
info$latticeInfo
x
lattice
info$latticeInfo
Q
LKrig.precision(info)
krigFit <- LKrig(x, y, LKinfo = info)
krigFit$d.coef
dHat
test<- LKrig.basis(x, info)
dim( test)
dim( Phi)
test.for.zero( Phi, test)
Phi <- psi(rdist(x, lattice) / (overlap*delta) )
B <- (
LKDiag(c(-1, 2.01, -1), m)
)
B <- spam2full(LKDiag(c(-1, 2.01, -1), m))
Q <- t(B) %*% B
P <- solve(Q)
M <- Phi %*% P %*% t(Phi) + lambda*diag(1, length(x))
Minverse <- solve(M)
ones <- rep(1, length(x))
Z <- cbind(ones, x)
dHat <- solve(t(Z) %*% Minverse %*% Z, t(Z) %*% Minverse %*% y)
G <- t(Phi)  %*% Phi + lambda*Q
cHat <- solve(G) %*% t(Phi) %*% (y - Z %*% dHat)
dHat
d.coef
krigFit$d.coef
info$latticeInfo
setwd("~/Dropbox/Home/Repositories/LatticeKrig/Vignette")
# throughout the this vignette here are the package version used for the R code examples
package_version(fields)
package_version("fields")
package.version("fields")
package.version(fields)
package.version(fields)
library(utilities)
packageVersion( fields)
packageVersion( "fields")
version()
R.version( )
RVersion( )
R.Version( )
