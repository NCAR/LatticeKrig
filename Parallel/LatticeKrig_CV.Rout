
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## Florian Gerber, gerber@mines.edu, July 17, 2019
> ## -----------------------------------------------
> 
> ## load packages and set defaults ----------------
> rm(list=ls())
> 
> library(LatticeKrig)
Loading required package: spam
Loading required package: dotCall64
Loading required package: grid
Spam version 2.2-2 (2019-03-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: fields
Loading required package: maps
See https://github.com/NCAR/Fields for
 an extensive vignette, other supplements and source code 
> library(fields)
> library(optimParallel)
Loading required package: parallel
> options(optimParallel.loginfo=TRUE)
> 
> ## a plot function for optimParallel
> plot.optimParallel <- function(oo, legendPosition="topleft", legendText=NULL, lwd=1.5, main="", ...){
+     opar <- par("xpd", "mai")
+     on.exit(par(opar))
+ 
+     par(mai=c(.8,1,.8,1))
+     indexPar <- 1:(ncol(oo$loginfo)/2-1)+1
+     nPar <- length(indexPar)
+     indexFn <- (ncol(oo$loginfo)/2)+1
+     colPar <- colorRampPalette(c(c("#CC6677", "#332288", "#DDCC77", "#117733", "#88CCEE", "#882255", 
+ "#44AA99", "#999933", "#AA4499")))(length(indexPar))
+     colFn <- "black"
+ 
+     if(is.null(legendText))
+         legendText <- colnames(oo$loginfo)[c(indexPar, indexFn)]
+     else if(length(legendText) != nPar+1)
+         stop("argument 'legendText' has to be of length #parameters + 1.")
+     matplot(oo$loginfo[,indexPar], type="l", lty=1, yaxt="n", col=colPar,
+             xlab="", ylab="pars", panel.first={grid(col="lightblue", lty=1, lwd=.3)}, lwd=lwd, main=main, ...)
+     mtext("step", side=1, line=2)
+     axis(2, las=2)
+     par(new=TRUE)
+     plot(oo$loginfo[,1], oo$loginfo[,indexFn], xlab="", xaxt="n", yaxt="n", ylab="", type="l", col=colFn, lty=2, lwd=lwd, ...)
+     axis(4, las=2, col=colFn)
+     corners  <-  par("usr") # Gets the four corners of plot area (x1, x2, y1, y2)
+     par(xpd = TRUE) # Draw outside plot area
+     text(x = corners[2]*1.15, y = mean(corners[3:4]), "fn()", srt = 270)
+     par(xpd = FALSE)
+     legend(legendPosition, legend=legendText, col=c(colPar, colFn), lty=c(rep(1, nPar), 2) , bg="white", lwd=lwd, ...)
+ }
> ## check for global variables
> codetools::findGlobals(plot.optimParallel, merge=FALSE)$variables
character(0)
> 
> set.seed(144)
> 
> formals(quilt.plot)$nx <- 150
> formals(quilt.plot)$ny <- 150
> 
> LKrigCV <- function(xTrain=NULL, xVali=NULL,
+                     zTrain=NULL, zVali=NULL,
+                     yTrain=NULL, yVali=NULL,
+                     beta=NULL,
+                     a.wght=NULL,
+                     lambda=NULL,
+                     LKinfo=NULL,
+                     ...,
+                     cache=NULL,
+                     verbose = FALSE,
+                     optimOut=FALSE){
+ 
+     ## setup LKinfo ---------------------------------------------------
+     if(is.null(cache)){
+         xTrain <- as.matrix(xTrain)
+         if (any(duplicated(cat.matrix(xTrain)))) 
+             warning("Not all xTrain locations are unique: see the results of\n                           duplicated(cat.matrix(xTrain)) ")
+         if (any(is.na(xTrain))) {
+             stop("Missing values in xTrain not allowed ")
+         }
+         
+         if(is.null(LKinfo)){
+             LKinfo <- do.call("LKrigSetup",
+                               c(list(x = apply(rbind(xTrain, xVali), 2,"range")),
+                                 a.wght=a.wght, lambda=lambda, 
+                                 list(...), 
+                                 list(verbose = verbose)))
+         } else {
+             LKinfo <- do.call("LKinfoUpdate", c(list(LKinfo = LKinfo), 
+                                                 a.wght=a.wght, lambda=lambda, list(...)))
+         }
+         LKinfo$fixedFunction <- LKinfo$fixedFunctionArgs <- NULL
+         
+         if (is.na(LKinfo$lambda) || is.null(LKinfo$lambda) || length(LKinfo$lambda) > 1) 
+             stop("Must specify a scalar lambda in call to LKrig or in LKinfo")
+         
+         if (LKinfo$dense) 
+             stop("'LKinfo$dense=TRUE' not supported")
+     } else {
+         LKinfo <- cache$LKinfo
+         LKarg <- c(list(LKinfo = LKinfo), list(...))
+         if(!is.null(lambda))
+             LKarg <- c(LKarg, lambda=lambda)
+         if(!is.null(a.wght))
+             LKarg <- c(LKarg, a.wght=a.wght)
+         LKinfo <- do.call("LKinfoUpdate", LKarg)
+ 
+         if(!is.null(xTrain) || !is.null(xVali) || !is.null(zTrain) || !is.null(zVali) || !is.null(yTrain) || !is.null(yVali))
+             stop("if 'cache' is provided 'xTrain', 'xVali', 'zTrain', 'zVali', 'yTrain', and 'yVali' have to be NULL")
+         
+         ## we assume that LKinfo has not changed!!!
+         ## if(!identical(LKinfo[!(names(LKinfo) %in% c("a.wght", "lambda"))],
+         ##               cache$LKinfo[!(names(cache$LKinfo) %in% c("a.wght", "lambda"))]))
+         ##     stop("LKinfo other than 'a.wght' or 'lambda' changed: cache cannot be used!")
+ 
+         xTrain <- cache$xTrain
+         xVali <- cache$xVali
+         zTrain <- cache$zTrain
+         zVali <- cache$zVali
+         yTrain <- cache$yTrain
+         yVali <- cache$yVali
+     }
+ 
+     ## decide what to update -------------------------------
+     updateInfo <- c(basis=TRUE, Q=TRUE, G=TRUE, beta=TRUE)
+     if(!is.null(cache)){
+         updateInfo["basis"] <- FALSE
+         if(identical(LKinfo$a.wght, cache$LKinfo$a.wght)){
+             updateInfo["Q"] <- FALSE
+             if(identical(LKinfo$lambda, cache$LKinfo$lambda))
+                 updateInfo["G"] <- FALSE
+         }
+         if(is.null(beta) || identical(beta, cache$beta)){
+             beta <- cache$beta
+             updateInfo["beta"] <- FALSE
+         }
+     }
+ 
+     ## basis ----------------------    
+     timeBasis <- system.time({
+         if(updateInfo["basis"]){
+             wX <- LKrig.basis(xTrain, LKinfo); 
+             wXcrossprod <- crossprod(wX);
+             PHIg <- LKrig.basis(xVali, LKinfo);
+         } else {
+             wX <- cache$wX;
+             wXcrossprod <- cache$wXcrossprod;
+             PHIg <- cache$PHIg;
+         }
+     })
+     
+     ## Q and G and Chol(G)-----------
+     timeQ <- system.time({
+         if(updateInfo["Q"]){
+             Q <- LKrig.precision(LKinfo, verbose = verbose)
+         } else {
+             Q <- cache$Q
+         }
+     })
+     timeG <- system.time({
+         if(updateInfo["G"]){
+             G <- wXcrossprod + LKinfo$lambda * Q
+         } else {
+             G <- cache$G
+         }
+     })
+ 
+     timeChol <- system.time({
+         if(updateInfo["G"]){
+             if(is.null(cache)){
+                 GCholesky <- chol.spam(G, memory = LKinfo$choleskyMemory)
+             } else {
+                 GCholesky <- update.spam.chol.NgPeyton(cache$GCholesky, G)
+             } 
+         } else {
+             GCholesky <- cache$GCholesky
+         }
+     })
+ 
+     ## combine with linear term -------
+     timePred <- system.time({
+         if(updateInfo["beta"]){
+             y <- as.matrix(yTrain - zTrain %*% beta);
+             if (!is.null(y) && any(is.na(y))) 
+                 stop("Missing values in y not allowed ");
+         } else {
+              y <- cache$y
+         }
+         c.coef <- solve.spam(GCholesky, crossprod(wX, y));
+         pred <- c(PHIg %*% c.coef) + zVali %*% beta;
+         SSE <- sum((yVali - pred)^2)
+     })
+     if(optimOut)
+         return(SSE)
+     time <- rbind(basis=timeBasis, Q=timeQ, G=timeG, Chol=timeChol, pred=timePred)[,1:3]
+     time <- rbind(time, all=colSums(time))
+     list(pred=pred, SSE=SSE, time=time, updateInfo=updateInfo,
+          cache=list(LKinfo=LKinfo, wX=wX, wXcrossprod=wXcrossprod,
+                     PHIg=PHIg, Q=Q, G=G, GCholesky=GCholesky, y=y, beta=beta,
+                     xTrain=xTrain, xVali=xVali, zTrain=zTrain, zVali=zVali, yTrain=yTrain, yVali=yVali))
+ }
> 
> ## check for global variables
> codetools::findGlobals(LKrigCV, merge=FALSE)$variables
character(0)
> 
> 
> ## simulate a spatial field ------------------------------------
> n <- 30000
> x <- cbind(runif(n), runif(n)) # spatial locations
> beta <- c(1,2,3)               # linear predictor
> z <- cbind(1, x)               # covariates
> LKinfo <- LKrigSetup(cbind(c(0,1), c(0,1)),
+                      NC=8, nlevel=3, alpha=(.5)^(0:2), lambda=.2, a.wght=15)
> resid <- LKrig.sim(x1=x, LKinfo=LKinfo)       # spatial residuals without nugget
> y <- z %*% beta + resid + rnorm(n, sd=.2)     # measured data
> quilt.plot(x[,1], x[,2], y, main="simulated data")
> 
> ## divide into training/validation data
> index <- sample(c(TRUE,FALSE), size=n, replace=TRUE)   
> xTrain <- x[index, ]
> xValid <- x[!index, ]
> yTrain <- y[index, ]
> yValid <- y[!index, ]
> zTrain <- z[index, ]
> zValid <- z[!index, ]
> 
> ## predict validation data with LatticeKrig, compute sum of squared errors SSE
> ## 1. use parameters from simulation
> pp <- LKrigCV(x=xTrain, xVali=xValid, zTrain=zTrain, zVali=zValid,
+               yTrain=yTrain, yVali=yValid, beta=c(1,2,3), LKinf=LKinfo)
> ## quilt.plot(xTrain[,1], xTrain[,2], z=yTrain, zlim=range(y, pp$pred))
> ## quilt.plot(xValid[,1], xValid[,2], z=pp$pred, zlim=range(y, pp$pred), add=TRUE)
> ## points(xValid, pch=".", cex=1)
> pp$SSE
[1] 645.4617
> pp$updateInfo
basis     Q     G  beta 
 TRUE  TRUE  TRUE  TRUE 
> pp$time
      user.self sys.self elapsed
basis     4.028    0.012   4.041
Q         0.010    0.001   0.010
G         0.006    0.000   0.005
Chol      0.091    0.007   0.099
pred      0.126    0.057   0.047
all       4.261    0.077   4.202
> 
> ## 2. update SSE for a different 'beta'
> pp2 <- LKrigCV(beta=c(1,2,3), a.wght=15, lambda=3, cache=pp$cache)
> ## quilt.plot(xTrain[,1], xTrain[,2], z=yTrain, zlim=range(y, pp2$pred))
> ## quilt.plot(xValid[,1], xValid[,2], z=pp2$pred, zlim=range(y, pp2$pred), add=TRUE)
> ## points(xValid, pch=".")
> pp2$SSE
[1] 980.6113
> pp2$updateInfo # only a small part has to be computed...
basis     Q     G  beta 
FALSE FALSE  TRUE FALSE 
> pp2$time 
      user.self sys.self elapsed
basis     0.001        0   0.000
Q         0.000        0   0.000
G         0.006        0   0.005
Chol      0.051        0   0.051
pred      0.028        0   0.027
all       0.086        0   0.083
> 
> ## update SSE for a different 'lambda'
> pp3 <- LKrigCV(lambda=0.01, cache=pp$cache)
> ## quilt.plot(xTrain[,1], xTrain[,2], z=yTrain, zlim=range(y, pp3$pred))
> ## quilt.plot(xValid[,1], xValid[,2], z=pp3$pred, zlim=range(y, pp3$pred), add=TRUE)
> ## points(xValid, pch=".")
> pp3$SSE
[1] 634.9034
> pp3$updateInfo # Q can be reused...
basis     Q     G  beta 
FALSE FALSE  TRUE FALSE 
> pp3$time       
      user.self sys.self elapsed
basis     0.000        0   0.000
Q         0.000        0   0.000
G         0.005        0   0.006
Chol      0.049        0   0.048
pred      0.026        0   0.025
all       0.080        0   0.079
> 1-pp3$time["Chol", 3]/pp$time["Chol", 3] # savings due to re-using symbolic factorization
[1] 0.5151515
> 
> 
> ## update SSE for a different 'a.wght'
> pp4 <- LKrigCV(a.wght=13, cache=pp$cache)
> quilt.plot(xTrain[,1], xTrain[,2], z=yTrain, zlim=range(yTrain, pp4$pred))
> quilt.plot(xValid[,1], xValid[,2], z=pp4$pred, zlim=range(yTrain, pp4$pred), add=TRUE)
> points(xValid, pch=".")
> pp4$SSE
[1] 640.8538
> pp4$updateInfo
basis     Q     G  beta 
FALSE  TRUE  TRUE FALSE 
> pp4$time       
      user.self sys.self elapsed
basis     0.000    0.000   0.000
Q         0.010    0.000   0.010
G         0.005    0.000   0.005
Chol      0.051    0.000   0.052
pred      0.025    0.001   0.025
all       0.091    0.001   0.092
> pp4$time["Chol", 3]/pp$time["Chol", 3] # savings due to re-using symbolic factorization
[1] 0.5252525
> 
> 
> ## find 'beta' that lead to optimal smales SSE
> cl <- makeForkCluster(detectCores(), outfile="")
starting worker pid=7843 on localhost:11211 at 17:34:01.114
starting worker pid=7844 on localhost:11211 at 17:34:01.130
starting worker pid=7845 on localhost:11211 at 17:34:01.136
starting worker pid=7846 on localhost:11211 at 17:34:01.142
> setDefaultCluster(cl)
> oo <- optimParallel(coef(lm(y ~ z-1)), 
+                     fn=function(x) {
+     print(unname(x), digits=3)
+     LKrigCV(beta=x, cache=pp$cache, optimOut=TRUE)})
[1] 0.855 2.924 2.301
[1] 0.854 2.924 2.302
[1] 0.854 2.923 2.301
[1] 0.854 2.924 2.300
[1] 0.853 2.924 2.301
[1] 0.854 2.925 2.301
[1] 0.854 2.924 2.301
[1] 0.0269 2.7408 1.7716
[1][1] 0.0259 0.0259 2.7408 2.7398 1.7726 1.7716

[1] 0.0259 2.7408 1.7706
[1] 0.0249 2.7408 1.7716
[1] 0.0259 2.7418 1.7716
[1] 0.0259 2.7408 1.7716
[1] 0.0915 2.9887 1.8153
[1] 0.0905 2.9887 1.8163
[1] 0.0905 2.9877 1.8153
[1] 0.0905 2.9887 1.8143
[1] 0.0905 2.9897 1.8153
[1] 0.0905 2.9887 1.8153
[1] 0.0895 2.9887 1.8153
[1] -0.039  3.583  1.741
[1] -0.04  3.58  1.74
[1] -0.04  3.58  1.74
[1] -0.04  3.58  1.74
[1] -0.04  3.58  1.74
[1] -0.041  3.583  1.741
[1] -0.04  3.58  1.74
[1] -0.367  4.214  1.554
[1][1] -0.368  4.213 -0.368  1.554
  4.214  1.555
[1] -0.368  4.214  1.553
[1] -0.368  4.215  1.554
[1] -0.368  4.214  1.554
[1] -0.369  4.214  1.554
[1] -0.571  4.371  1.487
[1][1] -0.571 -0.571  4.371  1.485  4.370
  1.486
[1] -0.57  4.37  1.49
[1] -0.572  4.371  1.486
[1] -0.571  4.371  1.486
[1] -0.571  4.372  1.486
[1][1] -0.569  4.372 -0.569  1.488  4.371
  1.487
[1] -0.569  4.372  1.486
[1] -0.568  4.372  1.487
[1] -0.57  4.37  1.49
[1] -0.569  4.372  1.487
[1] -0.569  4.373  1.487
> 
> oo$par
        z1         z2         z3 
-0.5691694  4.3723445  1.4871276 
> lm(y ~ z-1) # quite different from start values ... 

Call:
lm(formula = y ~ z - 1)

Coefficients:
    z1      z2      z3  
0.8543  2.9236  2.3011  

> 
> plot.optimParallel(oo, legendText=c(expression(beta[1]), expression(beta[2]),
+                                     expression(beta[3]), "fn"))# 
> 
> ## find 'beta', 'a.wght', 'lambda' that lead to optimal (small) SSE
> ## takes 1.5 minutes...
> oo2 <- optimParallel(c(coef(lm(y ~ z-1)), 4.5, .1), fn=function(x) {
+     print(unname(x), digits=3)
+     LKrigCV(beta=x[1:3], a.wght=x[4], lambda=x[5],
+               cache=pp$cache, optimOut=TRUE)},
+     lower=c(-Inf, -Inf, -Inf, 4.001, 0.001))
[1] 0.855 2.924 2.301 4.500 0.100
[1] 0.854 2.924 2.301 4.501 0.100
[1] 0.854 2.923 2.301 4.500 0.100
[1] 0.854 2.924 2.301 4.499 0.100
[1] 0.854 2.924 2.301 4.500 0.099
[1] 0.854 2.924 2.301 4.500 0.101
[1] 0.854 2.925 2.301 4.500 0.100
[1] 0.854 2.924 2.300 4.500 0.100
[1] 0.854 2.924 2.301 4.500 0.100
[1] 0.853 2.924 2.301 4.500 0.100
[1] 0.854 2.924 2.302 4.500 0.100
[1] 0.856 2.924 2.301 4.587 1.096
[1] 0.855 2.923 2.301 4.587 1.096
[1] 0.855 2.924 2.301 4.588 1.096
[1] 0.855 2.924 2.301 4.586 1.096
[1] 0.855 2.925 2.301 4.587 1.096
[1] 0.855 2.924 2.301 4.587 1.095
[1] 0.855 2.924 2.300 4.587 1.096
[1] 0.855 2.924 2.301 4.587 1.097
[1] 0.855 2.924 2.302 4.587 1.096
[1] 0.855 2.924 2.301 4.587 1.096
[1] 0.854 2.924 2.301 4.587 1.096
[1] 0.855 2.924 2.301 4.529 0.436
[1] 0.854 2.924 2.301 4.530 0.436
[1] 0.854 2.923 2.301 4.529 0.436
[1] 0.854 2.924 2.301 4.528 0.436
[1] 0.854 2.924 2.301 4.529 0.437
[1] 0.854 2.924 2.301 4.529 0.435
[1] 0.854 2.925 2.301 4.529 0.436
[1] 0.854 2.924 2.300 4.529 0.436
[1] 0.853 2.924 2.301 4.529 0.436
[1] 0.854 2.924 2.301 4.529 0.436
[1] 0.854 2.924 2.302 4.529 0.436
[1] 0.854 2.924 2.301 4.540 0.412
[1] 0.855 2.924 2.301 4.539 0.412
[1] 0.854 2.923 2.301 4.539 0.412
[1] 0.854 2.924 2.301 4.538 0.412
[1] 0.854 2.925 2.301 4.539 0.412
[1] 0.854 2.924 2.301 4.539 0.413
[1] 0.854 2.924 2.300 4.539 0.412
[1] 0.854 2.924 2.301 4.539 0.411
[1] 0.853 2.924 2.301 4.539 0.412
[1] 0.854 2.924 2.302 4.539 0.412
[1] 0.854 2.924 2.301 4.539 0.412
[1][1] 0.857 0.856 2.925 2.925 2.302 2.302 4.668 4.669 0.274 0.274

[1] 0.856 2.924 2.302 4.668 0.274
[1] 0.856 2.925 2.302 4.667 0.274
[1] 0.856 2.926 2.302 4.668 0.274
[1] 0.856 2.925 2.302 4.668 0.273
[1] 0.856 2.925 2.301 4.668 0.274
[1] 0.856 2.925 2.302 4.668 0.275
[1] 0.856 2.925 2.303 4.668 0.274
[1] 0.856 2.925 2.302 4.668 0.274
[1] 0.855 2.925 2.302 4.668 0.274
[1] 0.856 2.925 2.302 4.697 0.304
[1] 0.856 2.924 2.302 4.696 0.304
[1] 0.857 2.925 2.302 4.696 0.304
[1] 0.856 2.925 2.302 4.695 0.304
[1] 0.856 2.925 2.302 4.696 0.305
[1] 0.856 2.926 2.302 4.696 0.304
[1] 0.856 2.925 2.302 4.696 0.303
[1] 0.856 2.925 2.301 4.696 0.304
[1] 0.855 2.925 2.302 4.696 0.304
[1] 0.856 2.925 2.303 4.696 0.304
[1] 0.856 2.925 2.302 4.696 0.304
[1] 0.859 2.926 2.304 4.888 0.317
[1] 0.858 2.926 2.304 4.889 0.317
[1] 0.858 2.925 2.304 4.888 0.317
[1] 0.858 2.926 2.304 4.887 0.317
[1] 0.858 2.926 2.304 4.888 0.318
[1] 0.858 2.926 2.303 4.888 0.317
[1] 0.858 2.927 2.304 4.888 0.317
[1] 0.858 2.926 2.304 4.888 0.316
[1] 0.858 2.926 2.305 4.888 0.317
[1] 0.857 2.926 2.304 4.888 0.317
[1] 0.858 2.926 2.304 4.888 0.317
[1] 0.863 2.929 2.307 5.347 0.285
[1] 0.862 2.929 2.307 5.348 0.285
[1] 0.862 2.928 2.307 5.347 0.285
[1] 0.862 2.929 2.307 5.346 0.285
[1] 0.862 2.929 2.307 5.347 0.284
[1] 0.862 2.930 2.307 5.347 0.285
[1] 0.862 2.929 2.306 5.347 0.285
[1] 0.862 2.929 2.307 5.347 0.286
[1] 0.862 2.929 2.308 5.347 0.285
[1] 0.862 2.929 2.307 5.347 0.285
[1] 0.861 2.929 2.307 5.347 0.285
[1] 0.870 2.934 2.313 5.996 0.187
[1] 0.869 2.933 2.313 5.996 0.187
[1] 0.869 2.934 2.313 5.997 0.187
[1] 0.869 2.934 2.313 5.995 0.187
[1] 0.869 2.934 2.313 5.996 0.188
[1] 0.869 2.934 2.312 5.996 0.187
[1] 0.869 2.935 2.313 5.996 0.187
[1] 0.869 2.934 2.313 5.996 0.186
[1] 0.868 2.934 2.313 5.996 0.187
[1] 0.869 2.934 2.314 5.996 0.187
[1] 0.869 2.934 2.313 5.996 0.187
[1] 0.877 2.939 2.318 6.569 0.132
[1] 0.876 2.939 2.318 6.570 0.132
[1] 0.876 2.938 2.318 6.569 0.132
[1] 0.876 2.939 2.318 6.568 0.132
[1] 0.876 2.940 2.318 6.569 0.132
[1] 0.876 2.939 2.318 6.569 0.131
[1] 0.876 2.939 2.318 6.569 0.133
[1] 0.876 2.939 2.317 6.569 0.132
[1] 0.876 2.939 2.319 6.569 0.132
[1] 0.876 2.939 2.318 6.569 0.132
[1] 0.875 2.939 2.318 6.569 0.132
[1] 0.881 2.941 2.321 6.865 0.140
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.88 2.94 2.32 6.87 0.14
[1] 0.880 2.941 2.321 6.865 0.141
[1] 0.880 2.941 2.321 6.865 0.139
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.879 2.941 2.321 6.865 0.140
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.88 2.94 2.32 6.86 0.14
[1] 0.887 2.946 2.326 7.462 0.120
[1] 0.887 2.945[1] 2.326 0.887 7.461 2.946 0.120 2.326
 7.460 0.120
[1] 0.888 2.946 2.326 7.461 0.120
[1] 0.887 2.947 2.326 7.461 0.120
[1] 0.887 2.946 2.326 7.461 0.121
[1] 0.887 2.946 2.325 7.461 0.120
[1] 0.887 2.946 2.326 7.461 0.119
[1] 0.887 2.946 2.327 7.461 0.120
[1] 0.886 2.946 2.326 7.461 0.120
[1] 0.887 2.946 2.326 7.461 0.120
[1] 0.8966 2.9527 2.3356 8.1716 0.0939
[1] 0.8956 2.9527 2.3356 8.1726 0.0939
[1] 0.8956 2.9517 2.3356 8.1716 0.0939
[1] 0.8956 2.9527 2.3356 8.1706 0.0939
[1] 0.8956 2.9527 2.3346 8.1716 0.0939
[1] 0.8956 2.9527 2.3356 8.1716 0.0929
[1] 0.8956 2.9537 2.3356 8.1716 0.0939
[1] 0.8956 2.9527 2.3356 8.1716 0.0949
[1] 0.8956 2.9527 2.3356 8.1716 0.0939
[1] 0.8946 2.9527 2.3356 8.1716 0.0939
[1] 0.8956 2.9527 2.3366 8.1716 0.0939
[1] 0.9011 2.9568 2.3414 8.6025 0.0894
[1] 0.9011 2.9558 2.3414 8.6015 0.0894
[1] 0.9011 2.9568 2.3414 8.6005 0.0894
[1] 0.9021 2.9568 2.3414 8.6015 0.0894
[1] 0.9011 2.9578 2.3414 8.6015 0.0894
[1] 0.9011 2.9568 2.3414 8.6015 0.0884
[1] 0.9011 2.9568 2.3414 8.6015 0.0904
[1] 0.9011 2.9568 2.3404 8.6015 0.0894
[1] 0.9011 2.9568 2.3424 8.6015 0.0894
[1] 0.9001 2.9568 2.3414 8.6015 0.0894
[1] 0.9011 2.9568 2.3414 8.6015 0.0894
[1] 0.9102 2.9629 2.3498 9.2294 0.0757
[1] 0.9092 2.9629 2.3498 9.2304 0.0757
[1] 0.9092 2.9619 2.3498 9.2294 0.0757
[1] 0.9092 2.9629 2.3498 9.2284 0.0757
[1] 0.9092 2.9629 2.3488 9.2294 0.0757
[1] 0.9092 2.9629 2.3498 9.2294 0.0767
[1] 0.9092 2.9639 2.3498 9.2294 0.0757
[1] 0.9092 2.9629 2.3498 9.2294 0.0747
[1] 0.9082 2.9629 2.3498 9.2294 0.0757
[1] 0.9092 2.9629 2.3508 9.2294 0.0757
[1] 0.9092 2.9629 2.3498 9.2294 0.0757
[1] 0.9143 2.9661 2.3543 9.5458 0.0733
[1] 0.9133 2.9661 2.3543 9.5468 0.0733
[1] 0.9133 2.9651 2.3543 9.5458 0.0733
[1] 0.9133 2.9661 2.3543 9.5448 0.0733
[1] 0.9133 2.9661 2.3543 9.5458 0.0723
[1] 0.9133 2.9661 2.3543 9.5458 0.0743
[1] 0.9133 2.9671 2.3543 9.5458 0.0733
[1] 0.9133 2.9661 2.3533 9.5458 0.0733
[1] 0.9123 2.9661 2.3543 9.5458 0.0733
[1] 0.9133 2.9661 2.3543 9.5458 0.0733
[1] 0.9133 2.9661 2.3553 9.5458 0.0733
[1] 0.9189 2.9695 2.3591 9.8965 0.0675
[1] 0.9179 2.9695 2.3591 9.8975 0.0675
[1] 0.9179 2.9685 2.3591 9.8965 0.0675
[1] 0.9179 2.9695 2.3591 9.8955 0.0675
[1] 0.9179 2.9705 2.3591 9.8965 0.0675
[1] 0.9179 2.9695 2.3591 9.8965 0.0665
[1] 0.9179 2.9695 2.3581 9.8965 0.0675
[1] 0.9179 2.9695 2.3591 9.8965 0.0685
[1] 0.9179 2.9695 2.3601 9.8965 0.0675
[1] 0.9179 2.9695 2.3591 9.8965 0.0675
[1] 0.9169 2.9695 2.3591 9.8965 0.0675
[1]  0.9202  2.9706  2.3607 10.0016  0.0666
[1]  0.9192  2.9706  2.3607 10.0026  0.0666
[1]  0.9192  2.9696  2.3607 10.0016  0.0666
[1]  0.9192  2.9706  2.3607 10.0006  0.0666
[1]  0.9192  2.9716  2.3607 10.0016  0.0666
[1]  0.9192  2.9706  2.3597 10.0016  0.0666
[1]  0.9192  2.9706  2.3607 10.0016  0.0656
[1]  0.9192  2.9706  2.3607 10.0016  0.0676
[1]  0.9192  2.9706  2.3617 10.0016  0.0666
[1]  0.9192  2.9706  2.3607 10.0016  0.0666
[1]  0.9182  2.9706  2.3607 10.0016  0.0666
[1]  0.9211  2.9713  2.3618 10.0682  0.0658
[1]  0.9201  2.9703  2.3618 10.0682  0.0658
[1]  0.9201  2.9713  2.3618 10.0672  0.0658
[1]  0.9201  2.9713  2.3618 10.0692  0.0658
[1]  0.9201  2.9723  2.3618 10.0682  0.0658
[1]  0.9201  2.9713  2.3618 10.0682  0.0668
[1]  0.9201  2.9713  2.3608 10.0682  0.0658
[1]  0.9201  2.9713  2.3618 10.0682  0.0648
[1]  0.9201  2.9713  2.3628 10.0682  0.0658
[1]  0.9191  2.9713  2.3618 10.0682  0.0658
[1]  0.9201  2.9713  2.3618 10.0682  0.0658
[1]  0.9212  2.9714  2.3622 10.0754  0.0658
[1]  0.9202  2.9714  2.3622 10.0764  0.0658
[1]  0.9202  2.9704  2.3622 10.0754  0.0658
[1]  0.9202  2.9714  2.3622 10.0744  0.0658
[1]  0.9202  2.9714  2.3622 10.0754  0.0668
[1]  0.9202  2.9714  2.3612 10.0754  0.0658
[1]  0.9202  2.9714  2.3622 10.0754  0.0648
[1]  0.9202  2.9724  2.3622 10.0754  0.0658
[1]  0.9192  2.9714  2.3622 10.0754  0.0658
[1]  0.9202  2.9714  2.3622 10.0754  0.0658
[1]  0.9202  2.9714  2.3632 10.0754  0.0658
[1]  0.9214  2.9720  2.3645 10.1045  0.0655
[1]  0.9204  2.9720  2.3645 10.1055  0.0655
[1]  0.9204  2.9710  2.3645 10.1045  0.0655
[1]  0.9204  2.9720  2.3645 10.1035  0.0655
[1]  0.9204  2.9720  2.3645 10.1045  0.0645
[1]  0.9204  2.9720  2.3645 10.1045  0.0665
[1]  0.9204  2.9730  2.3645 10.1045  0.0655
[1]  0.9204  2.9720  2.3635 10.1045  0.0655
[1]  0.9204  2.9720  2.3645 10.1045  0.0655
[1]  0.9194  2.9720  2.3645 10.1045  0.0655
[1]  0.9204  2.9720  2.3655 10.1045  0.0655
[1]  0.9205  2.9731  2.3691 10.1377  0.0652
[1]  0.9205  2.9721  2.3691 10.1367  0.0652
[1]  0.9205  2.9731  2.3691 10.1357  0.0652
[1]  0.9215  2.9731  2.3691 10.1367  0.0652
[1]  0.9205  2.9731  2.3681 10.1367  0.0652
[1]  0.9205  2.9731  2.3691 10.1367  0.0642
[1]  0.9205  2.9741  2.3691 10.1367  0.0652
[1]  0.9205  2.9731  2.3691 10.1367  0.0662
[1]  0.9205  2.9731  2.3691 10.1367  0.0652
[1]  0.9205  2.9731  2.3701 10.1367  0.0652
[1]  0.9195  2.9731  2.3691 10.1367  0.0652
[1]  0.9212  2.9762  2.3836 10.2001  0.0646
[1]  0.9202  2.9752  2.3836 10.2001  0.0646
[1]  0.9202  2.9762  2.3836 10.1991  0.0646
[1]  0.9202  2.9762  2.3836 10.2011  0.0646
[1]  0.9202  2.9772  2.3836 10.2001  0.0646
[1]  0.9202  2.9762  2.3826 10.2001  0.0646
[1]  0.9202  2.9762  2.3836 10.2001  0.0656
[1]  0.9202  2.9762  2.3836 10.2001  0.0636
[1]  0.9202  2.9762  2.3846 10.2001  0.0646
[1]  0.9192  2.9762  2.3836 10.2001  0.0646
[1]  0.9202  2.9762  2.3836 10.2001  0.0646
[1]  0.9198  2.9837  2.4200 10.3196  0.0633
[1]  0.9188  2.9837  2.4200 10.3206  0.0633
[1]  0.9188  2.9827  2.4200 10.3196  0.0633
[1]  0.9188  2.9837  2.4200 10.3186  0.0633
[1]  0.9188  2.9847  2.4200 10.3196  0.0633
[1]  0.9188  2.9837  2.4190 10.3196  0.0633
[1]  0.9188  2.9837  2.4200 10.3196  0.0643
[1]  0.9188  2.9837  2.4200 10.3196  0.0623
[1]  0.9188  2.9837  2.4210 10.3196  0.0633
[1]  0.9178  2.9837  2.4200 10.3196  0.0633
[1]  0.9188  2.9837  2.4200 10.3196  0.0633
[1]  0.9156  3.0015  2.5084 10.5419  0.0607
[1]  0.9146  3.0015  2.5084 10.5429  0.0607
[1]  0.9146  3.0005  2.5084 10.5419  0.0607
[1]  0.9146  3.0015  2.5084 10.5409  0.0607
[1]  0.9146  3.0015  2.5084 10.5419  0.0597
[1]  0.9146  3.0015  2.5074 10.5419  0.0607
[1]  0.9146  3.0025  2.5084 10.5419  0.0607
[1]  0.9146  3.0015  2.5084 10.5419  0.0617
[1]  0.9146  3.0015  2.5084 10.5419  0.0607
[1]  0.9146  3.0015  2.5094 10.5419  0.0607
[1]  0.9136  3.0015  2.5084 10.5419  0.0607
[1] 0.809 3.183 3.555 9.212 0.100
[1] 0.808 3.183 3.555 9.211 0.100
[1] 0.808 3.183 3.555 9.213 0.100
[1] 0.808 3.182 3.555 9.212 0.100
[1] 0.8082 3.1826 3.5547 9.2120 0.0995
[1] 0.808 3.184 3.555 9.212 0.100
[1] 0.808 3.183 3.555 9.212 0.101
[1] 0.808 3.183 3.554 9.212 0.100
[1] 0.808 3.183 3.555 9.212 0.100
[1] 0.807 3.183 3.555 9.212 0.100
[1] 0.808 3.183 3.556 9.212 0.100
[1]  0.9125  3.0052  2.5296 10.5160  0.0615
[1]  0.9125  3.0042  2.5296 10.5150  0.0615
[1]  0.9125  3.0052  2.5296 10.5140  0.0615
[1]  0.9135  3.0052  2.5296 10.5150  0.0615
[1]  0.9125  3.0052  2.5286 10.5150  0.0615
[1]  0.9125  3.0062  2.5296 10.5150  0.0615
[1]  0.9125  3.0052  2.5296 10.5150  0.0605
[1]  0.9125  3.0052  2.5296 10.5150  0.0625
[1]  0.9125  3.0052  2.5306 10.5150  0.0615
[1]  0.9125  3.0052  2.5296 10.5150  0.0615
[1]  0.9115  3.0052  2.5296 10.5150  0.0615
[1]  0.904  3.037  2.692 10.803  0.058
[1]  0.903  3.036  2.692 10.803  0.058
[1]  0.903  3.037  2.692 10.802  0.058
[1]  0.903  3.037  2.692 10.804  0.058
[1]  0.903  3.037  2.691 10.803  0.058
[1]  0.903  3.037  2.692 10.803  0.057
[1]  0.903  3.037  2.692 10.803  0.059
[1]  0.903  3.038  2.692 10.803  0.058
[1]  0.903  3.037  2.692 10.803  0.058
[1]  0.903  3.037  2.693 10.803  0.058
[1]  0.902  3.037  2.692 10.803  0.058
[1]  0.8785  3.1004  3.0316 11.0080  0.0556
[1]  0.8775  3.0994  3.0316 11.0080  0.0556
[1]  0.8775  3.1004  3.0316 11.0070  0.0556
[1]  0.8775  3.1004  3.0316 11.0090  0.0556
[1]  0.8775  3.1004  3.0306 11.0080  0.0556
[1]  0.8775  3.1004  3.0316 11.0080  0.0546
[1]  0.8775  3.1004  3.0316 11.0080  0.0566
[1]  0.8775  3.1014  3.0316 11.0080  0.0556
[1]  0.8775  3.1004  3.0316 11.0080  0.0556
[1]  0.8775  3.1004  3.0326 11.0080  0.0556
[1]  0.8765  3.1004  3.0316 11.0080  0.0556
[1] 0.7790 3.2632 3.9811 9.6474 0.0711
[1] 0.7780 3.2622 3.9811 9.6474 0.0711
[1] 0.7780 3.2632 3.9811 9.6464 0.0711
[1] 0.7780 3.2632 3.9811 9.6484 0.0711
[1] 0.7780 3.2632 3.9811 9.6474 0.0721
[1] 0.7780 3.2632 3.9801 9.6474 0.0711
[1] 0.7780 3.2642 3.9811 9.6474 0.0711
[1] 0.7780 3.2632 3.9811 9.6474 0.0701
[1] 0.7770 3.2632 3.9811 9.6474 0.0711
[1] 0.7780 3.2632 3.9821 9.6474 0.0711
[1] 0.7780 3.2632 3.9811 9.6474 0.0711
[1]  0.7536  3.3318[1]  4.3435  0.7526 10.0406  3.3318  0.0668  4.3435
 10.0416  0.0668
[1]  0.7526  3.3308  4.3435 10.0406  0.0668
[1]  0.7526  3.3318  4.3435 10.0396  0.0668
[1]  0.7526  3.3328  4.3435 10.0406  0.0668
[1]  0.7526  3.3318  4.3435 10.0406  0.0658
[1]  0.7526  3.3318  4.3435 10.0406  0.0678
[1]  0.7526  3.3318  4.3425 10.0406  0.0668
[1]  0.7526  3.3318  4.3445 10.0406  0.0668
[1]  0.7526  3.3318  4.3435 10.0406  0.0668
[1]  0.7516  3.3318  4.3435 10.0406  0.0668
[1] 0.7682 3.2925 4.1359 9.8153 0.0692
[1] 0.7672 3.2915 4.1359 9.8153 0.0692
[1] 0.7672 3.2925 4.1359 9.8143 0.0692
[1] 0.7672 3.2925 4.1359 9.8163 0.0692
[1] 0.7672 3.2935 4.1359 9.8153 0.0692
[1] 0.7672 3.2925 4.1359 9.8153 0.0682
[1] 0.7672 3.2925 4.1359 9.8153 0.0702
[1] 0.7672 3.2925 4.1349 9.8153 0.0692
[1] 0.7672 3.2925 4.1369 9.8153 0.0692
[1] 0.7672 3.2925 4.1359 9.8153 0.0692
[1] 0.7662 3.2925 4.1359 9.8153 0.0692
[1] 0.7525 3.3218 4.2992 9.7588 0.0696
[1] 0.7525 3.3208 4.2992 9.7578 0.0696
[1] 0.7525 3.3218 4.2992 9.7568 0.0696
[1] 0.7535 3.3218 4.2992 9.7578 0.0696
[1] 0.7525 3.3218 4.2992 9.7578 0.0686
[1] 0.7525 3.3228 4.2992 9.7578 0.0696
[1] 0.7525 3.3218 4.2992 9.7578 0.0706
[1] 0.7525 3.3218 4.2982 9.7578 0.0696
[1] 0.7525 3.3218 4.2992 9.7578 0.0696
[1] 0.7525 3.3218 4.3002 9.7578 0.0696
[1] 0.7515 3.3218 4.2992 9.7578 0.0696
[1] 0.7592 3.3122 4.2439 9.8397 0.0682
[1] 0.7582 3.3112 4.2439 9.8397 0.0682
[1] 0.7582 3.3122 4.2439 9.8387 0.0682
[1] 0.7582 3.3122 4.2439 9.8407 0.0682
[1] 0.7582 3.3132 4.2439 9.8397 0.0682
[1] 0.7582 3.3122 4.2429 9.8397 0.0682
[1] 0.7582 3.3122 4.2439 9.8397 0.0672
[1] 0.7582 3.3122 4.2439 9.8397 0.0692
[1] 0.7582 3.3122 4.2449 9.8397 0.0682
[1] 0.7572 3.3122 4.2439 9.8397 0.0682
[1] 0.7582 3.3122 4.2439 9.8397 0.0682
[1] 0.7564 3.3169 4.2708 9.7999 0.0689
[1] 0.7554 3.3169 4.2708 9.8009 0.0689
[1] 0.7554 3.3159 4.2708 9.7999 0.0689
[1] 0.7554 3.3169 4.2708 9.7989 0.0689
[1] 0.7554 3.3169 4.2708 9.7999 0.0679
[1] 0.7554 3.3169 4.2698 9.7999 0.0689
[1] 0.7554 3.3169 4.2708 9.7999 0.0699
[1] 0.7554 3.3179 4.2708 9.7999 0.0689
[1] 0.7554 3.3169 4.2708 9.7999 0.0689
[1] 0.7554 3.3169 4.2718 9.7999 0.0689
[1] 0.7544 3.3169 4.2708 9.7999 0.0689
[1] 0.7571 3.3153 4.2622 9.8011 0.0689
[1] 0.7561 3.3143 4.2622 9.8011 0.0689
[1] 0.7561 3.3153 4.2622 9.8021 0.0689
[1] 0.7561 3.3153 4.2622 9.8001 0.0689
[1] 0.7561 3.3153 4.2612 9.8011 0.0689
[1] 0.7561 3.3153 4.2622 9.8011 0.0679
[1] 0.7561 3.3163 4.2622 9.8011 0.0689
[1] 0.7561 3.3153 4.2622 9.8011 0.0699
[1] 0.7561 3.3153 4.2622 9.8011 0.0689
[1] 0.7561 3.3153 4.2632 9.8011 0.0689
[1] 0.7551 3.3153 4.2622 9.8011 0.0689
> 
> oo2$par
        z1         z2         z3                       
0.75607874 3.31527274 4.26218340 9.80105100 0.06889451 
> plot.optimParallel(oo2, legendText=c(expression(beta[1]), expression(beta[2]),
+                                      expression(beta[3]), "a.wght", expression(lambda), "fn"))
> stopCluster(cl)
> 
> 
> 
> proc.time()
   user  system elapsed 
 11.460   1.797 110.800 
