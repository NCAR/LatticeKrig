c("Estimate", "Std. Error", "t value", "Pr(>|t|)"  )
)
coefficients[,1]<- d.coef
SE<- sqrt(object$rho.MLE* diag( object$Omega))
coefficients[,2]<- SE
coefficients[,3]<- d.coef/SE
df<- length( object$n) - nP
df
df<-  object$n  - nP
2 * pt( abs(d.coef/SE), df, lower.tail=FALSE )
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/summary.LKrig.R')
remove( list=ls())
obj1<- LKrig( x,y , a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# Find location that are not 'NA'.
# (LKrig is not set up to handle missing observations.)
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
# fairly arbitrary choices for covariance parameters and lambda
# just to show a basic level call
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
if( nReps==1){
coefficients <- matrix(NA, ncol=4, nrow=nP )
dimnames( coefficients)<- list( NULL,
c("Estimate", "Std. Error", "t value", "Pr(>|t|)"  )
)
coefficients[,1]<- d.coef
SE<- sqrt(object$rho.MLE* diag( object$Omega))
coefficients[,2]<- SE
coefficients[,3]<- d.coef/SE
df<-  object$n  - nP
coefficients[,4]<- 2 * pt( abs(d.coef/SE), df, lower.tail=FALSE )
}
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/summary.LKrig.R')
summary( obj1)
Z<- matrix( 1:24, 4,6)
dimnames( Z)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y , a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
names( obj1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
x
colnames( x)<- c( "1","B")
x
colnames( x)
source('~/.active-rstudio-document')
LKDefaultVarNames(x)
dimnames( x)<- NULL
LKDefaultVarNames(x,"X")
source('~/.active-rstudio-document')
LKDefaultVarNames(x,"X")
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
A<- fields.mkpoly( x, m=2)
A
A<- fields.mkpoly( x, m=3)
A
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
colnames(x)<- c("A","B")
fields.mkpoly(x, 2)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x, 2)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x, 2)
fields.mkpoly(x[1:3,], 2)
fields.mkpoly(x[1:3,], 3)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 3)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 3)
fields.mkpoly(x[1:3,], 2)
B<- cbind( c(0,1,0), c(0,0,1))
B
paste( B, sep="")
paste( B, collapse="")
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 3)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 3)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 3)
fields.mkpoly(x[1:3,], 4)
colnames(x)<- NULL
fields.mkpoly(x[1:3,], 4)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
fields.mkpoly(x[1:3,], 0)
fields.mkpoly(x[1:3,], 1)
source('~/Dropbox/Home/Repositories/fields/fields/R/fields.mkpoly.R')
colnames(x)<- c ("A","N")
fields.mkpoly(x[1:3,], 1)
library( LatticeKrig)
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# Find location that are not 'NA'.
# (LKrig is not set up to handle missing observations.)
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
# fairly arbitrary choices for covariance parameters and lambda
# just to show a basic level call
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
print(obj1)
LKDefaultVarNames<- function(A, tag){
colA<- colnames(A)
if( is.null(colA)){
colA<- paste0(tag,1:ncol(A))
}
return(colA)
}
summary( obj1)
obj1$d.coef
names( obj1)
colnames( obj1$wU   )
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# Find location that are not 'NA'.
# (LKrig is not set up to handle missing observations.)
good <-  !is.na( y)
x<- x[good,]
y<- y[good]
# fairly arbitrary choices for covariance parameters and lambda
# just to show a basic level call
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
print(obj1)
obj1$d.coef
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigMakewU.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigMakewU.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
obj1$d.coef
colnames(x)<- c("lon","lat")
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
obj1$d.coef
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/summary.LKrig.R')
temp<- function( A){}
temp<- function( A){  temp2<- as.character(substitute(A)) ; print( temp2)}
temp(z)
temp(ztttt)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( x,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
obj1$d.coef
xTemp<-x
colname( xTemp)<- NULL
colnames( xTemp)<- NULL
obj1<- LKrig( xTemp,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
obj1$d.coef
obj1<- LKrig( xTemp,y, a.wght=5, m=3, nlevel=3, nu=1.0, NC=10, lambda=.1)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj1<- LKrig( xTemp,y, a.wght=5, m=3, nlevel=3, nu=1.0, NC=10, lambda=.1)
obj1<- LKrig( xTemp,y, a.wght=5, nlevel=3, nu=1.0, NC=10, lambda=.1)
summary( obj1)
170*365
library( LatticeKrig)
help("LKrigFindLambda")
data(NorthAmericanRainfall)
# rename for less typing
x<- cbind( NorthAmericanRainfall$longitude, NorthAmericanRainfall$latitude)
y<- log10(NorthAmericanRainfall$precip)
# cut down the size of this data set so examples run quickly
ind<- x[,1] > -90 & x[,2] < 35 #
x<- x[ind,]
y<- y[ind]
# This is a single level smoother
LKinfo<- LKrigSetup(x,NC=4, nlevel=1, a.wght=5, alpha=1.0)
lambdaFit<- LKrigFindLambda( x,y,LKinfo=LKinfo)
lambdaFit$summary
LKrigFindLambda <- function(x, y, ...,  LKinfo,
use.cholesky=NULL,
lambda.profile=TRUE,
lowerBoundLogLambda=-16,
tol=.005,
verbose=FALSE) {
# parts of the LKrig call that will be fixed.  (except updates to LKinfo)
LKrigArgs <- c(list(x = x, y = y), list( ...),
list( LKinfo=LKinfo, NtrA=ifelse( lambda.profile, 0, 20) ))
if( verbose){
cat( "LKrigFindLambda: Complete set of LKrigArgs:", names(LKrigArgs ), fill=TRUE)
}
capture.evaluations <- matrix(NA, ncol = 4, nrow = 1,
dimnames = list(NULL, c("lambda", "rho.MLE",
"sigma.MLE", "lnProfileLike.FULL")))
optim.counts<-  NA
llambda.start<- log( LKrigArgs$LKinfo$lambda )
if( is.na(llambda.start)){ llambda.start<- -1 }
if(verbose){
cat("LKrigFindLambda: llambda.start:",  llambda.start, fill=TRUE)
}
#
# first fit to get cholesky symbolic decomposition  and wX and wU matrices
# Note that if use.cholesky != NULL then the symbolic decomposition information is
# used from the passed object.
LKrigObject <- do.call("LKrig", c(
LKrigArgs,
list(
use.cholesky = use.cholesky,
return.cholesky = TRUE,
return.wXandwU = TRUE,
lambda = exp( llambda.start),
verbose = verbose)))
capture.evaluations[1,] <-  c( LKrigObject$LKinfo$lambda,
LKrigObject$rho.MLE.FULL,
LKrigObject$sigma.MLE.FULL,
LKrigObject$lnProfileLike.FULL)
llambda.opt<- llambda.start
Mc.save<- LKrigObject$Mc
wX.save<- LKrigObject$wX
wU.save<- LKrigObject$wU
#    print( dim( wX.save))
#
##### in most cases now optimze likelihood over log lambda
if( lambda.profile){
#  temporary function used in optimizer
#
# objective function
temp.fn <- function(x) {
#    cat("temp.fn: lambda ", exp(x), fill=TRUE)
lambdaTemp<- exp(x)
hold <- do.call("LKrig",
c(LKrigArgs, list(
use.cholesky = Mc.save,
wX = wX.save,
wU = wU.save,
verbose = FALSE,
lambda = lambdaTemp
)
)
)[c( "rho.MLE.FULL", "sigma.MLE.FULL",
"lnProfileLike.FULL") ]
lnProfileLike.FULL<- hold$lnProfileLike.FULL
rowForCapture<- c(lambdaTemp,
hold$rho.MLE.FULL,
hold$sigma.MLE.FULL,
hold$lnProfileLike.FULL)
temp.eval <- get("capture.evaluations")
assign("capture.evaluations",rbind(temp.eval, rowForCapture),
envir = capture.env)
return(lnProfileLike.FULL)
}
#
# the try wrapper captures case when optim fails.
capture.env <- environment()
look<- try(optimize( temp.fn, interval = llambda.start+c(-8,5),
maximum= TRUE, tol=tol))
if(verbose){
cat("Results from optimize:", fill=TRUE)
print( look)
}
evalSummary <- !(class( look)== "try-error")
llambda.MLE <- look$maximum
lambda.MLE =  exp(llambda.MLE)
optim.counts <- nrow( capture.evaluations) + 2
LKrigArgs$NtrA <- 20
# surgery on the args list to update lambda with the MLE.
#            LKrigArgs$LKinfo<- LKinfoUpdate(LKrigArgs$LKinfo,lambda = lambda.MLE  )
LKrigObject <- do.call("LKrig", c(LKrigArgs,
list(use.cholesky = Mc.save,
wX = wX.save,
wU = wU.save,
lambda = lambda.MLE)
)
)
}
###### end optimze block
# save summary results from this set of parameters.
if( lambda.profile ){
out <-  c( LKrigObject$trA.est,
LKrigObject$lnProfileLike.FULL,
LKrigObject$GCV,
LKrigObject$sigma.MLE.FULL,
LKrigObject$rho.MLE.FULL,
lambda.MLE,
llambda.MLE,
LKrigObject$lnLike.FULL,
optim.counts,
NA)
names( out) <-  c("EffDf", "lnProfLike", "GCV",
"sigma.MLE", "rho.MLE", "lambda.MLE",
"llambda.MLE", "lnLike",
"counts value", "grad")
}
else{
# simple clean up when optimization is not done
out <-  c( LKrigObject$trA.est,
LKrigObject$lnProfileLike.FULL,
LKrigObject$GCV,
LKrigObject$sigma.MLE.FULL,
LKrigObject$rho.MLE.FULL,
exp( llambda.start),
llambda.start,
LKrigObject$lnLike.FULL,
NA,
NA)
lambda.MLE<- exp( llambda.start)
names( out) <-  c("EffDf", "lnProfLike", "GCV",
"sigma.MLE", "rho.MLE", "lambda",
"llambda", "lnLike",
"counts value", "grad")
}
return(list(summary = out,
LKinfo = LKinfo,
llambda.start = llambda.start,
lambda.MLE = lambda.MLE,
lnLike.eval = capture.evaluations
)
# call omitted because it can substitute actual
# values and get large
#                  call = match.call()
#                  )
)
}
lambdaFit$summary(lambdaFit)
lambdaFit$summary
LKinfo<- LKrigSetup(x,NC=4, nlevel=1, a.wght=5, alpha=1.0)
lambdaFit<- LKrigFindLambda( x,y,LKinfo=LKinfo)
lambdaFit$summary
data(NorthAmericanRainfall)
# rename for less typing
x<- cbind( NorthAmericanRainfall$longitude, NorthAmericanRainfall$latitude)
y<- log10(NorthAmericanRainfall$precip)
# cut down the size of this data set so examples run quickly
ind<- x[,1] > -90 & x[,2] < 35 #
x<- x[ind,]
y<- y[ind]
# This is a single level smoother
LKinfo<- LKrigSetup(x,NC=4, nlevel=1, a.wght=5, alpha=1.0)
lambdaFit<- LKrigFindLambda( x,y,LKinfo=LKinfo)
lambdaFit$summary
## Not run:
# grid search over parameters
NG<-15
par.grid<- list( a.wght= rep( 4.05,NG),alpha= rep(1, NG),
llambda=  seq(-8,-2,,NG))
lambda.search.results<-LKrig.MLE( x,y,LKinfo=LKinfo,
par.grid=par.grid,
lambda.profile=FALSE)
lambda.search.results$summary
# profile likelihood
plot( lambda.search.results$summary[,1:2],
xlab="effective degrees freedom",
ylab="ln profile likelihood")
# fit at largest likelihood value:
lambda.MLE.fit<- LKrig( x,y,
LKinfo=lambda.search.results$LKinfo.MLE)
library( LatticeKrig)
help( "LKrigFindLambda")
x<- cbind( NorthAmericanRainfall$longitude, NorthAmericanRainfall$latitude)
y<- log10(NorthAmericanRainfall$precip)
# cut down the size of this data set so examples run quickly
ind<- x[,1] > -90 & x[,2] < 35 #
x<- x[ind,]
y<- y[ind]
# This is a single level smoother
LKinfo<- LKrigSetup(x,NC=4, nlevel=1, a.wght=5, alpha=1.0)
lambdaFit<- LKrigFindLambda( x,y,LKinfo=LKinfo)
lambdaFit$summary
data(NorthAmericanRainfall)
# rename for less typing
x<- cbind( NorthAmericanRainfall$longitude, NorthAmericanRainfall$latitude)
y<- log10(NorthAmericanRainfall$precip)
# cut down the size of this data set so examples run quickly
ind<- x[,1] > -90 & x[,2] < 35 #
x<- x[ind,]
y<- y[ind]
# This is a single level smoother
LKinfo<- LKrigSetup(x,NC=4, nlevel=1, a.wght=5, alpha=1.0)
lambdaFit<- LKrigFindLambda( x,y,LKinfo=LKinfo)
lambdaFit$summary
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigFindLambda.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigFindLambda.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigFindLambda.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigFindLambda.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrigFindLambda.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=TRUE)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=FALSE)
args( LKrig)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKDefaultVarNames.R')
LKrigFindLambda( x,y,LKinfo=LKinfo, verbose=FALSE)
obj0<- LKrig( CO2$lon.lat,CO2$y,LKinfo=LKinfo0, lambda=0.01)
data(CO2)
LKinfo0<- LKrigSetup( CO2$lon.lat, startingLevel=1 ,nlevel=2,
a.wght=1.1, alpha=c(1,.25),
LKGeometry="LKSphere" )
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj0<- LKrig( CO2$lon.lat,CO2$y,LKinfo=LKinfo0, lambda=0.01)
temp<- list( x= CO2$lon.lat, y= CO2$y,LKinfo=LKinfo0, lambda=0.01)
look<- do.call( "LKrig", temp)
help("substitute")
help( environment)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj0<- LKrig( CO2$lon.lat,CO2$y,LKinfo=LKinfo0, lambda=0.01)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/createLKrigObject.R')
obj0<- LKrig( CO2$lon.lat,CO2$y,LKinfo=LKinfo0, lambda=0.01)
source('~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R/LKrig.R')
obj0<- LKrig( CO2$lon.lat,CO2$y,LKinfo=LKinfo0, lambda=0.01)
summary( obj0)
145*365
24*265*60*60/12\
24*265*60*60/12
24*365*60*60/12
24*365*60
setwd("~/Dropbox/Home/Repositories/LatticeKrig/LatticeKrig/R")
library( LatticeKrig)
help( "LatticeKrig")
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
summary( obj)
colnames(x)
colnames(x)<- c( "lon", "lat")
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
summary( obj)
colnames( x)
colnames(x)<- c( "lon", "lat")
colnames( x)
data(ozone2)
x<-ozone2$lon.lat
y<- ozone2$y[16,]
# thin plate spline-like model with the lambda parameter estimated by
# maximum likelihood. Default choices are made for a.wght, nlevel, NC
# and alpha.
obj<- LatticeKrig( x, y)
summary( obj)
fields.mkpoly(x)
fields.mkpoly
fields.mkpoly(x)
colnames(x)
colnames(x)<- c( "lon", "lat")
fields.mkpoly(x)
obj<- LatticeKrig(x,y)
summary( obj)
obj<- LatticeKrig(x,y, m=3)
args( LatticeKrig)
args( LKrigSetup)
obj<- LatticeKrig(x,y, fixedFunctionArgs = list(m = 3))
summary( obj)
obj$LKinfo
