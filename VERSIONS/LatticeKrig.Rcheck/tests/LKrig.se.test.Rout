
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # LatticeKrig
> # Copyright 2004-2011, Institute for Mathematics Applied Geosciences
> # University Corporation for Atmospheric Research
> # Licensed under the GPL -- www.gpl.org/licenses/gpl.html
> 
> library(LatticeKrig)
Loading required package: spam
Loading required package: grid
Spam version 0.41-0 (2014-02-26) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: 'spam'

The following objects are masked from 'package:base':

    backsolve, forwardsolve

Loading required package: fields
Loading required package: maps
> #options( echo=FALSE)
>  test.for.zero.flag<- 1
> 
> # small test dataset
> data(ozone2)
> x<- ozone2$lon.lat
> y<- ozone2$y[16,]
> good<- !is.na( y)
> x<- x[good,]
> y<- y[good]
> x<- x[1:20,]
> y<- y[1:20]
> 
>   a.wght<- 5
>   lambda <-  1.5
> # in both calls iseed is set the same so we can compare 
> # Monte Carlo estimates of effective degrees of freedom
>   obj1<- LKrig( x,y,NC=16,nlevel=1, alpha=1,  lambda=lambda, a.wght=5, NtrA=20,iseed=122,
+                return.cholesky=TRUE)
>   obj2<- mKrig( x,y, lambda=lambda, m=2, cov.function="LKrig.cov",
+                       cov.args=list( LKinfo=obj1$LKinfo), NtrA=20, iseed=122)
>   obj3<- Krig( x,y, lambda=lambda, m=2, cov.function="LKrig.cov",
+                       cov.args=list( LKinfo=obj1$LKinfo) )
>   test.for.zero( obj1$fitted.values, obj2$fitted.values,
+                   tag="comparing predicted values LKrig and mKrig")
testing:  comparing predicted values LKrig and mKrig
    PASSED test at tolerance  1e-08
>   test.for.zero( obj1$fitted.values, obj3$fitted.values,
+                   tag="comparing predicted values LKrig and Krig")
testing:  comparing predicted values LKrig and Krig
    PASSED test at tolerance  1e-08
>              
>   test3.se<-predictSE.Krig( obj3, x[1:3,])
>   test2.se<-predictSE.mKrig( obj2, x[1:3,])
>   test1.se<- predictSE.LKrig( obj1,  x[1:3,])
>   test.for.zero( test1.se, test2.se,
+                   tag="comparing SE values LKrig and mKrig equal weights")
testing:  comparing SE values LKrig and mKrig equal weights
    PASSED test at tolerance  1e-08
>   test.for.zero( test1.se, test3.se, 
+                   tag="comparing SE values LKrig and Krig equal weights")
testing:  comparing SE values LKrig and Krig equal weights
    PASSED test at tolerance  1e-08
> 
> ###########################
> ##### weighted case
> ###########################
>  set.seed(123)
>  weights<- runif( 20)
>  obj1<- LKrig( x,y,NC=16,nlevel=1, alpha=1,  lambda=lambda, a.wght=5, NtrA=20,iseed=122,
+                return.cholesky=TRUE, weights=weights) 
>  obj2<- mKrig( x,y, lambda=lambda, m=2, cov.function="LKrig.cov",
+                       cov.args=list( LKinfo=obj1$LKinfo), NtrA=20, iseed=122,
+                        weights=weights)
>  obj0<- Krig(  x,y, lambda=lambda, m=2, cov.function="LKrig.cov",
+                       cov.args=list( LKinfo=obj1$LKinfo), weights=weights)
>  test0.se<- predictSE.Krig( obj0, x[1:3,])
>  test1.se<- predictSE.LKrig( obj1,  x[1:3,])
>  test2.se<-predictSE.mKrig( obj2, x[1:3,])
>  test.for.zero( test0.se,test1.se,
+                   tag="sanity for SE Krig and mKrig unequal weights")
testing:  sanity for SE Krig and mKrig unequal weights
    PASSED test at tolerance  1e-08
>  test.for.zero( test1.se,test2.se,
+                   tag=" SE LKrig and mKrig unequal weights")
testing:   SE LKrig and mKrig unequal weights
    PASSED test at tolerance  1e-08
> 
> ###########################
> ######## covariates
> ##########################
>  set.seed(122)
>    nX<- nrow( x)
>    Z<-  matrix(runif(nX*2), ncol=2, nrow=nX)
>    obj1<- LKrig( x,y,NC=16,nlevel=1, alpha=1,  lambda=lambda, a.wght=5, NtrA=20,iseed=122,
+                return.cholesky=TRUE, weights=weights, Z=Z)
>    obj0<- Krig(  x,y, lambda=lambda, m=2, cov.function="LKrig.cov",
+                       cov.args=list( LKinfo=obj1$LKinfo), weights=weights, Z=Z)
>   test0<- predictSE( obj0, drop.Z=FALSE, Z=Z)
>   test1<- predictSE( obj1, Z=Z)
>   test.for.zero( test0, test1, tag="check on SE values with drop.Z=FALSE")
testing:  check on SE values with drop.Z=FALSE
    PASSED test at tolerance  1e-08
> 
> 
> cat("All done with SE tests", fil=TRUE)
All done with SE tests TRUE> options( echo=TRUE)
> 
> 
> proc.time()
   user  system elapsed 
  7.434   0.032   7.457 
