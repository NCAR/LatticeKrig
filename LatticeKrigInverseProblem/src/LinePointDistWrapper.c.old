#include <R.h>
#include <Rinternals.h>

void lklinepointdist(int* dim, double* points, int* nPoints, double* lines, int* nLines, double* ranges, int* rangeReps, int* nRanges, int* ind, double* entries, int* nEntries);
void lklinepointdistmock(int** pointer, int* length);

SEXP LinePointDistMat(SEXP dim_, SEXP points_, SEXP nPoints_, SEXP lines_, SEXP nLines_, SEXP ranges_, SEXP rangeReps_, SEXP nRanges_) {
  int *dim = INTEGER(dim_), *nPoints = INTEGER(nPoints_), *nLines = INTEGER(nLines_), *rangeReps = INTEGER(rangeReps_), *nRanges = INTEGER(nRanges_);
  int *ind = NULL, nEntries = 0;

  double *points = REAL(points_), *lines = REAL(lines_), *ranges = REAL(ranges_);
  double *entries = NULL;

//  lklinepointdist(dim, points, nPoints, lines, nLines, ranges, rangeReps, nRanges, ind, entries, &nEntries);
  
//This code was my attempt to pass a pointer into fortran, have fortran set that pointer to the array it computes,
//get that array out and put it into an SEXP object. Nothing I tried was able to get the data back out of fortran
//successfully; accessing the pointer's target always gave garbage output.
  int* array = NULL;
  int length = 0;
  lklinepointdistmock(&array, &length);
  SEXP arrayOut = PROTECT(allocVector(INTSXP, 1));
  SEXP lengthOut = PROTECT(ScalarInteger(length));
  int* arrayOutData = INTEGER(arrayOut);
  arrayOutData[0] = *array;
//  arrayOutData[1] = array[1];
//  arrayOutData[2] = array[2];
//  arrayOutData[3] = array[3];
//  arrayOutData[4] = array[4];

  SEXP entriesOut = PROTECT(allocVector(REALSXP, nEntries));
  SEXP indOut = PROTECT(allocMatrix(INTSXP, 2, nEntries));
  double *entriesOutData = REAL(entriesOut);
  int *indOutData = INTEGER(indOut);

  for(int i = 0; i < nEntries; i++) {
    //entriesOutData[i] = entries[i];
    //indOutData[2*i] = ind[2*i];
    //indOutData[2*i + 1] = ind[2*i + 1];
  }

//  SEXP ans = PROTECT(allocVector(VECSXP, 2));
  const char *names[] = {"vec", "len", ""};
  SEXP ans = PROTECT(mkNamed(VECSXP, names));
//  setAttrib(entriesOut, R_NamesSymbol, 
//  SET_VECTOR_ELT(ans, 0, indOut);
//  SET_VECTOR_ELT(ans, 1, entriesOut);
  SET_VECTOR_ELT(ans, 0, arrayOut);
  SET_VECTOR_ELT(ans, 1, lengthOut);
  UNPROTECT(5);
  return ans;
}
